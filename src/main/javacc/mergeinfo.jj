options {
    STATIC = false;
    JAVA_UNICODE_ESCAPE = false;
    USER_CHAR_STREAM = true;
}

// Header

PARSER_BEGIN(MergeInfoParser)
package com.github.cstroe.svndumpgui.generated;

import com.github.cstroe.svndumpgui.internal.transform.property.MergeInfoData;
//import com.github.cstroe.svndumpgui.internal.utility.SvnDumpCharStream;

import java.io.ByteArrayInputStream;

public class MergeInfoParser {
//    public static MergeInfoData parse(String string) throws ParseException {
//        //MergeInfoParser parser = new MergeInfoParser(new SvnDumpCharStream(new ByteArrayInputStream(string.getBytes())));
//        MergeInfoParser parser = new MergeInfoParser();
//        return parser.Start();
//    }
}
PARSER_END(MergeInfoParser)

// Lexer

TOKEN: { <MERGE_PATH: (~[":"])*> : REVISIONS }

<REVISIONS> TOKEN: { <COLON: ":"> }
<REVISIONS> TOKEN: { <NUMBER: (["0"-"9"])+> }
<REVISIONS> TOKEN: { <DASH: "-"> }
<REVISIONS> TOKEN: { <COMMA: ","> }
<REVISIONS> TOKEN: { <STAR: "*"> }
<REVISIONS> TOKEN: { <NEWLINE: "\n"> : DEFAULT }

// Parser

public MergeInfoData Start():
{
    MergeInfoData data = new MergeInfoData();
    boolean appendNewLine = false;
}
{
    (
        appendNewLine = Path(data)
    )*

    {
        data.setTrailingNewLine(appendNewLine);
        return data;
    }
}

public boolean Path(MergeInfoData data):
{
    Token mergePath;
    MergeInfoData.Path path;
    boolean appendNewLine = false;
}
{
    mergePath = <MERGE_PATH> <COLON>
    {
        path = new MergeInfoData.Path(mergePath.image);
    }

    Range(path)
    ( <COMMA> Range(path) )*

    (
        <NEWLINE>
        { appendNewLine = true; }
    )?

    {
        data.addPath(path);
        return appendNewLine;
    }
}

public void Range(MergeInfoData.Path path):
{
    Token fromNumber;
    Token toNumber = null;
    Token star = null;
    int from;
    int to;
}
{
    fromNumber = <NUMBER>
    ( <DASH> toNumber = <NUMBER> )?
    [ star = <STAR> ]
    {
        from = Integer.parseInt(fromNumber.image);
        if(toNumber != null) {
            to = Integer.parseInt(toNumber.image);
            if(star == null) {
                path.addRange(new MergeInfoData.Range(from, to));
            } else {
                path.addRange(new MergeInfoData.Range(from, to, true));
            }
        } else {
            if(star == null) {
                path.addRange(new MergeInfoData.Range(from));
            } else {
                path.addRange(new MergeInfoData.Range(from, true));
            }
        }
    }
}